@page "/login"
@using System.Net
@using System.Security.Claims
@using ESII2025d2.Models.ViewModels
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@inject NavigationManager Navigation
@inject ApplicationDbContext ApplicationDbContext

<PageTitle>Login</PageTitle>

<h1 class="header">Plataforma de Gestão de Talentos IT</h1>

<div class="row">
    <div class="col-lg-4" offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator/>
            <div class="mb-3 text-center flex-column">
                <h3>Login</h3>
            </div>
            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="Model.Email" class="form-control" placeholder="Email" />
                <ValidationMessage For="() => Model.Email"/>
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" />
                <ValidationMessage For="() => Model.Password"/>
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger"></span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    
    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;
    
    private async Task Authenticate()
    {
        var Utilizador = ApplicationDbContext.Utilizadores.Where(x => x.email == Model.Email).FirstOrDefault();
        if (Utilizador is null || Utilizador.palavra_passe != Model.Password)
        {
            errorMessage = "Utilizador ou palavra-passe inválidos.";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Email, Model.Email)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
    }

    
}