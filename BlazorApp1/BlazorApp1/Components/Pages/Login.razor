@page "/login"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using ESII2025d2.Models.Dtos
@inject NavigationManager Navigation
@inject HttpClient Http
@inject ILogger<Login> Logger

<PageTitle>Login</PageTitle>

<h1 class="header">Plataforma de Gestão de Talentos IT</h1>

<div class="container">
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />

       <input type="email" id="email" @bind="loginModel.Email" placeholder="Digite o seu e-mail" class="form-control mb-2" />
       <ValidationMessage For="@(() => loginModel.Email)" />

       <input type="password" id="password" @bind="loginModel.Password" placeholder="Palavra-passe" class="form-control mb-2" />
       <ValidationMessage For="@(() => loginModel.Password)" />

        <div class="form-check mb-2">
             <input type="checkbox" class="form-check-input" id="rememberMe" @bind="loginModel.RememberMe">
             <label class="form-check-label" for="rememberMe">Lembrar-me</label>
        </div>

        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }

        <button type="submit" id="login" class="btn btn-secondary">Iniciar Sessão</button>
        <p></p>
        <hr class="divider" />
        <p></p>
        <a id="register" class="btn btn-secondary register" href="/register">Criar Nova Conta</a>
    </EditForm>
</div>

@code {
    private LoginDto loginModel = new LoginDto();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = null; // Clear previous errors
        try
        {
            var response = await Http.PostAsJsonAsync("api/account/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                // Login successful, cookie is set by the server.
                // Navigate to the home page or dashboard
                Navigation.NavigateTo("/", forceLoad: true); // forceLoad to ensure auth state is picked up
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger?.LogWarning("Login failed: {StatusCode} - {ErrorContent}", response.StatusCode, errorContent);
                
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                     errorMessage = "E-mail ou palavra-passe inválidos.";
                } else {
                     errorMessage = $"Erro no login ({response.StatusCode}). Tente novamente.";
                }
            }
        }
        catch (HttpRequestException ex)
        {
            Logger?.LogError(ex, "Network error during login.");
            errorMessage = "Erro de rede ao tentar fazer login. Verifique a sua conexão.";
        }
        catch (Exception ex)
        {
            Logger?.LogError(ex, "Unexpected error during login.");
            errorMessage = "Ocorreu um erro inesperado. Tente novamente mais tarde.";
        }
    }
}
