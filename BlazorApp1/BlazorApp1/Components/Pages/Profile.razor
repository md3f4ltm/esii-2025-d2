@page "/profile"
@rendermode InteractiveServer
@using System.Security.Claims // Needed for ClaimTypes
@using Microsoft.AspNetCore.Authorization // Needed for [Authorize] attribute
@using Microsoft.AspNetCore.Components.Authorization

@* Ensures only logged-in users can access this page *@
@attribute [Authorize]

<PageTitle>User Profile</PageTitle>

<h1>User Profile</h1>

@if (userInfoLoaded)
{
    if (isAuthenticated)
    {
        <p><strong>Welcome, @userName!</strong></p>
        <p>This is your profile page.</p>
        @* You could add more user details here later if needed *@
    }
    else
    {
        @* This part should ideally not be reached due to the [Authorize] attribute *@
        <p>Cannot display profile information. User is not authenticated.</p>
    }
}
else
{
    <p><em>Loading user information...</em></p>
}


@code {
    private string? userName;
    private bool isAuthenticated = false;
    private bool userInfoLoaded = false;

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!; // Initialize to suppress CS8618
    @inject ILogger<Profile> Logger // Inject logger

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Profile OnInitializedAsync started.");

        // No null check needed if CascadingAuthenticationState is guaranteed by App.razor
        // and [Authorize] ensures user is logged in.

        try
        {
            var authState = await AuthenticationStateTask;
            Logger.LogInformation("Got authState. User authenticated: {IsAuth}", authState.User?.Identity?.IsAuthenticated ?? false);

            var user = authState.User;

            if (user?.Identity != null && user.Identity.IsAuthenticated)
            {
                // Assigning to the now-declared variables
                isAuthenticated = true;
                Logger.LogInformation("User IS authenticated.");

                // Simplified username fetching for clarity
                userName = user.Identity.Name ?? user.FindFirst(ClaimTypes.Name)?.Value ?? "(Name claim not found)";

                Logger.LogInformation("User name found: {UserName}", userName);
            }
            else
            {
                 // Assigning to the now-declared variable
                isAuthenticated = false;
                Logger.LogWarning("User IS NOT authenticated despite [Authorize] attribute.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in Profile OnInitializedAsync.");
            // Assigning to the now-declared variables
            isAuthenticated = false;
            userName = "(Error loading profile)";
        }
        finally // Use finally to ensure userInfoLoaded is always set
        {
             // Assigning to the now-declared variable
             userInfoLoaded = true;
             Logger.LogInformation("Profile OnInitializedAsync finished. userInfoLoaded = true.");
             StateHasChanged();
        }
    }
}
