@page "/register"
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using ESII2025d2.Models.Dtos
@inject NavigationManager Navigation
@inject HttpClient Http

<PageTitle>Register</PageTitle>

<h1 class="header">Plataforma de Gestão de Talentos IT</h1>

<div class="container">
    <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />

        <div class="input-row">
            <input type="text" id="nome" @bind="registerModel.Nome" placeholder="Nome Completo" class="form-control" />
            <ValidationMessage For="@(() => registerModel.Nome)" />
        </div>
        <p></p>

        <h3 class="custom-text">Data de nascimento</h3>
        <p></p>
        <div class="dob form-inline mb-2">
            <label for="day" class="mr-1">Dia:</label>
            <select id="day" @bind="SelectedDay" class="form-control select-style mr-2">
                @for (int i = 1; i <= 31; i++) { <option value="@i">@i</option> }
            </select>

            <label for="month" class="mr-1">Mês:</label>
            <select id="month" @bind="SelectedMonth" class="form-control select-style mr-2">
                <option value="">-- Mês --</option>
                @for (int i = 1; i <= 12; i++) { <option value="@i">@CultureInfo.GetCultureInfo("pt-PT").DateTimeFormat.GetMonthName(i)</option> }
            </select>

            <label for="year" class="mr-1">Ano:</label>
            <select id="year" @bind="SelectedYear" class="form-control select-style">
                <option value="">-- Ano --</option>
                @for (int i = DateTime.Now.Year; i >= 1900; i--) { <option value="@i">@i</option> }
            </select>
            <ValidationMessage For="@(() => registerModel.DataNascimento)" />
        </div>
        <p></p>

        <input type="text" id="username" @bind="registerModel.Username" placeholder="Nome de Utilizador" class="form-control mb-2" />
        <ValidationMessage For="@(() => registerModel.Username)" />

        <input type="email" id="email" @bind="registerModel.Email" placeholder="Digite o seu e-mail" class="form-control mb-2" />
        <ValidationMessage For="@(() => registerModel.Email)" />

        <input type="password" id="password" @bind="registerModel.Password" placeholder="Palavra-passe" class="form-control mb-2" />
        <ValidationMessage For="@(() => registerModel.Password)" />
        <p></p>

        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }

        <button type="submit" class="btn btn-secondary">Registar</button>
        <p></p>
        <hr class="divider" />
        <p></p>
        <a class="btn btn-secondary" href="/login">Voltar ao Login</a>
    </EditForm>
</div>

@code {
    private RegisterDto registerModel = new RegisterDto();
    private string? errorMessage;
    
    // Date of birth selection
    private int SelectedDay { get; set; } = DateTime.Now.Day;
    private int SelectedMonth { get; set; } = DateTime.Now.Month;
    private int SelectedYear { get; set; } = DateTime.Now.Year;

    // Update date of birth when component initializes and when selections change
    protected override void OnInitialized()
    {
        UpdateDateOfBirth();
    }

    protected override void OnParametersSet()
    {
        UpdateDateOfBirth();
    }

    private void UpdateDateOfBirth()
    {
        try
        {
            // Convert to DateOnly for the model
            registerModel.DataNascimento = new DateOnly(SelectedYear, SelectedMonth, SelectedDay);
        }
        catch
        {
            // Handle invalid date (e.g., February 30th)
            // Will be caught by validation
        }
    }

    private async Task HandleRegister()
    {
        errorMessage = null; // Clear previous errors
        UpdateDateOfBirth(); // Ensure date is updated

        try
        {
            var response = await Http.PostAsJsonAsync("api/account/register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/login", forceLoad: true);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                
                if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    errorMessage = $"Erro no registo: {errorContent}";
                }
                else 
                {
                    errorMessage = $"Erro no registo ({response.StatusCode}). Tente novamente.";
                }
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Erro de rede ao tentar fazer o registo. Verifique a sua conexão.";
        }
        catch (Exception ex)
        {
            errorMessage = "Ocorreu um erro inesperado. Tente novamente mais tarde.";
        }
    }
}
