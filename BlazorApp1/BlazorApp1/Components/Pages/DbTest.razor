@page "/dbtest"
@using BlazorApp1.Models
@using BlazorApp1.Services
@inject IUserService UserService

<PageTitle>User List</PageTitle>

<h3>User List</h3>
<div class="mb-3">
  <button class="btn btn-primary" @onclick="LoadUsers">Refresh Users</button>
</div>

<div class="alert alert-info">
  <p><strong>Status:</strong> @status</p>
  <p><strong>User Count:</strong> @userCount</p>
  @if (!string.IsNullOrEmpty(errorMessage))
  {
    <p><strong>Error:</strong> @errorMessage</p>
  }
</div>

@if (users != null && users.Any())
{
  <table class="table">
    <thead>
      <tr>
        <th>Username</th>
        <th>Email</th>
        <th>First Name</th>
        <th>Last Name</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var user in users)
      {
        <tr>
          <td>@user.UserName</td>
          <td>@user.Email</td>
          <td>@user.FirstName</td>
          <td>@user.LastName</td>
        </tr>
      }
    </tbody>
  </table>
}
else
{
  <p>No users found in database.</p>
}

@code {
  private List<ApplicationUser> users = new();
  private int userCount = 0;
  private string status = "Idle";
  private string errorMessage = "";

  protected override async Task OnInitializedAsync()
  {
    await LoadUsers();
  }

  private async Task LoadUsers()
  {
    try
    {
      status = "Loading users...";
      errorMessage = "";
      await InvokeAsync(StateHasChanged);

      users.Clear();
      users = await UserService.GetAllUsersAsync();
      userCount = users.Count;
      status = $"Loaded {userCount} users";
    }
    catch (Exception ex)
    {
      status = "Error loading users";
      errorMessage = ex.Message;
    }
    finally
    {
      await InvokeAsync(StateHasChanged);
    }
  }
}
