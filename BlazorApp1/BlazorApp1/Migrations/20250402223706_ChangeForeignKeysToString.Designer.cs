// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ESII2025d2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250402223706_ChangeForeignKeysToString")]
    partial class ChangeForeignKeysToString
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ESII2025d2.Models.CategoriaTalento", b =>
                {
                    b.Property<int>("cod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("cod"));

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("cod");

                    b.ToTable("CategoriaTalento");
                });

            modelBuilder.Entity("ESII2025d2.Models.Cliente", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("empresa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("idutilizador")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("numerotelefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("idutilizador");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("ESII2025d2.Models.Experiencia", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("anocomeco")
                        .HasColumnType("integer");

                    b.Property<int?>("anofim")
                        .HasColumnType("integer");

                    b.Property<int>("idtalento")
                        .HasColumnType("integer");

                    b.Property<string>("nomeempresa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("idtalento");

                    b.ToTable("Experiencia");
                });

            modelBuilder.Entity("ESII2025d2.Models.PropostaTrabalho", b =>
                {
                    b.Property<int>("cod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("cod"));

                    b.Property<int?>("cattalento_cod")
                        .HasColumnType("integer");

                    b.Property<string>("cliente_id")
                        .HasColumnType("text");

                    b.Property<int>("codskill")
                        .HasColumnType("integer");

                    b.Property<string>("descricao")
                        .HasColumnType("text");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("numtotalhoras")
                        .HasColumnType("integer");

                    b.HasKey("cod");

                    b.HasIndex("cattalento_cod");

                    b.HasIndex("cliente_id");

                    b.HasIndex("codskill");

                    b.ToTable("PropostaTrabalho");
                });

            modelBuilder.Entity("ESII2025d2.Models.Skill", b =>
                {
                    b.Property<int>("cod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("cod"));

                    b.Property<string>("area")
                        .HasColumnType("text");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("cod");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("ESII2025d2.Models.Talento", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("codcategoriatalento")
                        .HasColumnType("integer");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("idutilizador")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("pais")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("precohora")
                        .HasColumnType("numeric");

                    b.HasKey("id");

                    b.HasIndex("codcategoriatalento");

                    b.HasIndex("idutilizador");

                    b.ToTable("Talento");
                });

            modelBuilder.Entity("ESII2025d2.Models.TalentoSkill", b =>
                {
                    b.Property<int>("codskill")
                        .HasColumnType("integer");

                    b.Property<int>("anosexperiencia")
                        .HasColumnType("integer");

                    b.Property<int>("idtalento")
                        .HasColumnType("integer");

                    b.HasKey("codskill");

                    b.HasIndex("idtalento");

                    b.ToTable("TalentoSkill");
                });

            modelBuilder.Entity("ESII2025d2.Models.Utilizador", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateOnly>("datanascimento")
                        .HasColumnType("date");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ESII2025d2.Models.Cliente", b =>
                {
                    b.HasOne("ESII2025d2.Models.Utilizador", "idutilizadorNavigation")
                        .WithMany("Clientes")
                        .HasForeignKey("idutilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("idutilizadorNavigation");
                });

            modelBuilder.Entity("ESII2025d2.Models.Experiencia", b =>
                {
                    b.HasOne("ESII2025d2.Models.Talento", "idtalentoNavigation")
                        .WithMany("Experiencia")
                        .HasForeignKey("idtalento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("idtalentoNavigation");
                });

            modelBuilder.Entity("ESII2025d2.Models.PropostaTrabalho", b =>
                {
                    b.HasOne("ESII2025d2.Models.CategoriaTalento", "cattalento_codNavigation")
                        .WithMany("PropostaTrabalhos")
                        .HasForeignKey("cattalento_cod");

                    b.HasOne("ESII2025d2.Models.Cliente", "cliente")
                        .WithMany("PropostaTrabalhos")
                        .HasForeignKey("cliente_id");

                    b.HasOne("ESII2025d2.Models.Skill", "codskillNavigation")
                        .WithMany("PropostaTrabalhos")
                        .HasForeignKey("codskill")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cattalento_codNavigation");

                    b.Navigation("cliente");

                    b.Navigation("codskillNavigation");
                });

            modelBuilder.Entity("ESII2025d2.Models.Talento", b =>
                {
                    b.HasOne("ESII2025d2.Models.CategoriaTalento", "codcategoriatalentoNavigation")
                        .WithMany("Talentos")
                        .HasForeignKey("codcategoriatalento");

                    b.HasOne("ESII2025d2.Models.Utilizador", "idutilizadorNavigation")
                        .WithMany("Talentos")
                        .HasForeignKey("idutilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("codcategoriatalentoNavigation");

                    b.Navigation("idutilizadorNavigation");
                });

            modelBuilder.Entity("ESII2025d2.Models.TalentoSkill", b =>
                {
                    b.HasOne("ESII2025d2.Models.Skill", "codskillNavigation")
                        .WithMany("TalentoSkills")
                        .HasForeignKey("codskill")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESII2025d2.Models.Talento", "idtalentoNavigation")
                        .WithMany("TalentoSkills")
                        .HasForeignKey("idtalento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("codskillNavigation");

                    b.Navigation("idtalentoNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ESII2025d2.Models.Utilizador", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ESII2025d2.Models.Utilizador", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ESII2025d2.Models.Utilizador", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ESII2025d2.Models.Utilizador", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ESII2025d2.Models.CategoriaTalento", b =>
                {
                    b.Navigation("PropostaTrabalhos");

                    b.Navigation("Talentos");
                });

            modelBuilder.Entity("ESII2025d2.Models.Cliente", b =>
                {
                    b.Navigation("PropostaTrabalhos");
                });

            modelBuilder.Entity("ESII2025d2.Models.Skill", b =>
                {
                    b.Navigation("PropostaTrabalhos");

                    b.Navigation("TalentoSkills");
                });

            modelBuilder.Entity("ESII2025d2.Models.Talento", b =>
                {
                    b.Navigation("Experiencia");

                    b.Navigation("TalentoSkills");
                });

            modelBuilder.Entity("ESII2025d2.Models.Utilizador", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Talentos");
                });
#pragma warning restore 612, 618
        }
    }
}
