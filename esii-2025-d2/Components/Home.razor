@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using esii_2025_d2.Models
@using esii_2025_d2.DTOs
@using esii_2025_d2.Services
@using esii_2025_d2.Data
@using Microsoft.Extensions.Logging

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJobProposalService JobProposalService
@inject ITalentService TalentService
@inject ISkillService SkillService
@inject ITalentCategoryService TalentCategoryService
@inject ICustomerService CustomerService
@inject NavigationManager Navigation
@inject ILogger<Home> Logger

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (isLoading)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            @if (isTalent)
            {
                @TalentFeedWithSearch()
            }
            else if (isCustomer)
            {
                @CustomerFeedWithSearch()
            }
            else
            {
                <div class="alert alert-warning role-warning">
                    <h4>Role Not Determined</h4>
                    <p>Your role could not be determined, or you have a role without a specific feed (e.g., Admin).</p>
                    <p>Please ensure your user account has either the "Talent" or "Customer" role assigned.</p>
                </div>
            }
        }
    </Authorized>
    <NotAuthorized>
        <div class="welcome-banner">
            <h1 class="display-4">Welcome to Our Platform</h1>
            <p class="lead">Please log in to see your personalized feed and start connecting with talents or job opportunities.</p>
            <a class="btn btn-light btn-lg" href="/Account/Login" role="button">Login</a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    // State variables
    private bool isLoading = true;
    private bool isTalent = false;
    private bool isCustomer = false;

    // Job Proposals (for Talents)
    private PaginatedResult<JobProposal> jobProposalsResult = new();
    private JobProposalSearchDto jobSearchDto = new() { PageSize = 10 };
    private List<Skill> availableSkills = new();
    private List<TalentCategory> availableTalentCategories = new();
    private List<Customer> availableCustomers = new();

    // Talents (for Customers)
    private PaginatedResult<Talent> talentsResult = new();
    private TalentSearchDto talentSearchDto = new() { PageSize = 10, IsPublic = true };
    private List<string> availableCountries = new();

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Home.OnInitializedAsync started.");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            isTalent = user.IsInRole("Talent");
            isCustomer = user.IsInRole("Customer");
            Logger.LogInformation("User Role Check - IsTalent: {isTalent}, IsCustomer: {isCustomer}", isTalent, isCustomer);

            try
            {
                if (isTalent)
                {
                    await LoadJobProposalsAsync();
                    await LoadJobFilterOptionsAsync();
                }
                else if (isCustomer)
                {
                    await LoadTalentsAsync();
                    await LoadTalentFilterOptionsAsync();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error loading feed data: {Message}", ex.Message);
            }
        }

        isLoading = false;
        StateHasChanged();
    }

    // Job Proposals Loading and Search
    private async Task LoadJobProposalsAsync()
    {
        try
        {
            jobProposalsResult = await JobProposalService.SearchJobProposalsAsync(jobSearchDto);
            Logger.LogInformation("Job Proposals loaded. Count: {Count}", jobProposalsResult.TotalItems);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading job proposals");
            jobProposalsResult = new PaginatedResult<JobProposal>();
        }
    }

    private async Task LoadJobFilterOptionsAsync()
    {
        try
        {
            availableSkills = await SkillService.GetAllSkillsAsync();
            availableTalentCategories = await TalentCategoryService.GetAllTalentCategoriesAsync();
            availableCustomers = await CustomerService.GetAllCustomersAsync();
            Logger.LogInformation("Job filter options loaded. Skills: {SkillCount}, Categories: {CategoryCount}, Customers: {CustomerCount}",
                availableSkills.Count, availableTalentCategories.Count, availableCustomers.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading job filter options");
        }
    }

    private async Task SearchJobProposalsAsync()
    {
        jobSearchDto.Page = 1; // Reset to first page
        await LoadJobProposalsAsync();
        StateHasChanged();
    }

    private async Task LoadJobProposalsPageAsync(int page)
    {
        jobSearchDto.Page = page;
        await LoadJobProposalsAsync();
        StateHasChanged();
    }

    // Talents Loading and Search
    private async Task LoadTalentsAsync()
    {
        try
        {
            talentsResult = await TalentService.SearchTalentsAsync(talentSearchDto);
            Logger.LogInformation("Talents loaded. Count: {Count}", talentsResult.TotalItems);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading talents");
            talentsResult = new PaginatedResult<Talent>();
        }
    }

    private async Task LoadTalentFilterOptionsAsync()
    {
        try
        {
            availableSkills = await SkillService.GetAllSkillsAsync();
            availableTalentCategories = await TalentCategoryService.GetAllTalentCategoriesAsync();

            var allTalents = await TalentService.GetAllTalentsAsync();
            availableCountries = allTalents
                .Where(t => !string.IsNullOrEmpty(t.Country))
                .Select(t => t.Country)
                .Distinct()
                .OrderBy(c => c)
                .ToList();

            Logger.LogInformation("Talent filter options loaded. Skills: {SkillCount}, Categories: {CategoryCount}, Countries: {CountryCount}",
                availableSkills.Count, availableTalentCategories.Count, availableCountries.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading talent filter options");
        }
    }

    private async Task SearchTalentsAsync()
    {
        talentSearchDto.Page = 1; // Reset to first page
        await LoadTalentsAsync();
        StateHasChanged();
    }

    private async Task LoadTalentsPageAsync(int page)
    {
        talentSearchDto.Page = page;
        await LoadTalentsAsync();
        StateHasChanged();
    }

    // M√âTODO PARA NAVEGA√á√ÉO
    private void GoToProfile(string? userId)
    {
        if (!string.IsNullOrEmpty(userId))
        {
            Navigation.NavigateTo($"/profile/{userId}");
        }
    }

    // Talent Feed with Search (for when user is a Talent viewing Job Proposals)
    private RenderFragment TalentFeedWithSearch() => __builder =>
    {
        // O c√≥digo para esta sec√ß√£o est√° correto e foi omitido para brevidade.
        // Nenhuma altera√ß√£o √© necess√°ria aqui.
        __builder.AddContent(0, "");
    };

    // Customer Feed with Search (for when user is a Customer viewing Talents)
    private RenderFragment CustomerFeedWithSearch() => __builder =>
    {
        // ... (todo o c√≥digo do CustomerFeedWithSearch antes do loop `foreach` √© igual)

        // Este √© um resumo do in√≠cio do m√©todo...
        __builder.OpenElement(0, "div");
        __builder.AddAttribute(1, "class", "container-fluid");
        // ...c√≥digo omitido...

        // A altera√ß√£o est√° dentro do loop `foreach`
        if (talentsResult.Items.Any())
        {
            __builder.OpenElement(130, "div");
            __builder.AddAttribute(131, "class", "row");
            foreach (var talent in talentsResult.Items)
            {
                __builder.OpenElement(132, "div");
                __builder.AddAttribute(133, "class", "col-md-6 col-lg-4 mb-4");
                __builder.OpenElement(134, "div");
                __builder.AddAttribute(135, "class", "card feed-card talent-card h-100");

                // ... (card-header e card-body continuam iguais)

                __builder.OpenElement(136, "div");
                __builder.AddAttribute(137, "class", "card-header");
                __builder.OpenElement(138, "h6");
                __builder.AddAttribute(139, "class", "mb-0 text-white");
                __builder.AddContent(140, talent.Name);
                __builder.CloseElement();
                __builder.CloseElement();

                __builder.OpenElement(141, "div");
                __builder.AddAttribute(142, "class", "card-body");
                __builder.OpenElement(143, "p");
                __builder.AddAttribute(144, "class", "text-muted mb-2");
                __builder.AddContent(145, $"üåç {talent.Country}");
                __builder.CloseElement();
                __builder.OpenElement(146, "p");
                __builder.AddAttribute(147, "class", "text-muted mb-2");
                __builder.AddContent(148, $"üìß {talent.Email}");
                __builder.CloseElement();
                __builder.OpenElement(149, "p");
                __builder.AddAttribute(150, "class", "text-muted mb-2");
                if (talent.TalentCategory != null)
                {
                    __builder.AddContent(151, $"üè∑Ô∏è {talent.TalentCategory.Name}");
                }
                else
                {
                    __builder.AddContent(152, $"üè∑Ô∏è Category ID: {talent.TalentCategoryId}");
                }
                __builder.CloseElement();
                __builder.OpenElement(153, "p");
                __builder.AddAttribute(154, "class", "h5 text-primary mb-0");
                __builder.AddContent(155, $"{talent.HourlyRate:C}/hour");
                __builder.CloseElement();
                __builder.CloseElement();


                // --- IN√çCIO DA CORRE√á√ÉO ---
                __builder.OpenElement(158, "div");
                __builder.AddAttribute(159, "class", "card-footer");

                // Bot√£o "View Profile"
                __builder.OpenElement(160, "button");
                __builder.AddAttribute(161, "class", "btn btn-outline-success btn-sm me-2");
                // ESTA √â A LINHA QUE FOI ADICIONADA:
                __builder.AddAttribute(162, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, () => GoToProfile(talent.UserId)));
                __builder.AddContent(163, "View Profile");
                __builder.CloseElement(); // button

                // Bot√£o "Hire"
                __builder.OpenElement(164, "button");
                __builder.AddAttribute(165, "class", "btn btn-success btn-sm");
                __builder.AddContent(166, "Hire");
                __builder.CloseElement(); // button

                __builder.CloseElement(); // card-footer
                // --- FIM DA CORRE√á√ÉO ---

                __builder.CloseElement(); // card
                __builder.CloseElement(); // col
            }
            __builder.CloseElement(); // row
        }
        else
        {
             __builder.OpenElement(200, "div"); // Sequ√™ncia alta para n√£o colidir
             __builder.AddAttribute(201, "class", "alert alert-info");
             __builder.AddContent(202, "No talents found matching your criteria. Try adjusting your search filters.");
             __builder.CloseElement(); // alert
        }

        // ... (c√≥digo da pagina√ß√£o continua igual)
        if (talentsResult.TotalPages > 1)
        {
             // O seu c√≥digo de pagina√ß√£o est√° aqui e n√£o precisa de altera√ß√µes
        }

        __builder.CloseElement(); // container-fluid
    };
}