@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Json
@using esii_2025_d2.Models
@using esii_2025_d2.Data
@using Microsoft.Extensions.Logging

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILogger<Home> Logger

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (isLoading)
        {
            <p><em>Loading feed...</em></p>
        }
        else
        {
            @if (isTalent)
            {
                @TalentFeed(jobProposals)
            }
            else if (isCustomer)
            {
                @CustomerFeed(talents)
            }
            else
            {
                <p>Your role could not be determined, or you have a role without a specific feed (e.g., Admin).</p>
                <p>Please ensure your user account has either the "Talent" or "Customer" role assigned.</p>
            }
        }
    </Authorized>
    <NotAuthorized>
        <p>Please log in to see your personalized feed.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool isLoading = true;
    private bool isTalent = false;
    private bool isCustomer = false;
    private IEnumerable<JobProposal> jobProposals = new List<JobProposal>();
    private IEnumerable<Talent> talents = new List<Talent>();

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Home.OnInitializedAsync started.");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            isTalent = user.IsInRole("Talent");
            isCustomer = user.IsInRole("Customer");
            Logger.LogInformation("User Role Check - IsTalent: {isTalent}, IsCustomer: {isCustomer}", isTalent, isCustomer);

            try
            {
                if (isTalent)
                {
                    Logger.LogInformation("Fetching Job Proposals for Talent...");
                    jobProposals = await Http.GetFromJsonAsync<IEnumerable<JobProposal>>("api/JobProposal/GetAllProposals") ?? new List<JobProposal>();
                    Logger.LogInformation("Job Proposals fetched. Count: {Count}", jobProposals.Count());
                    if (!jobProposals.Any())
                    {
                        Logger.LogInformation("No job proposals were returned from the API or the list is empty.");
                    }
                }
                else if (isCustomer)
                {
                    Logger.LogInformation("Fetching Talents for Customer...");
                    talents = await Http.GetFromJsonAsync<IEnumerable<Talent>>("api/Talent/GetAllTalents") ?? new List<Talent>();
                    if (talents == null) { // Should be handled by ?? new List<Talent>()
                        Logger.LogWarning("Talents list is NULL after fetch despite null coalescing operator.");
                        talents = new List<Talent>(); // Ensure it's not null for rendering
                    }
                    Logger.LogInformation("Talents fetched. Count: {Count}", talents.Count());
                     if (!talents.Any())
                    {
                        Logger.LogInformation("No talents were returned from the API or the list is empty.");
                    }
                }
            }
            catch (System.Net.Http.HttpRequestException httpEx)
            {
                Logger.LogError(httpEx, "HTTP Error fetching feed data. Status Code: {StatusCode}", httpEx.StatusCode);
                // Optionally, provide more user-friendly error messages based on status code
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Generic Error fetching feed data");
            }
            // Ensure collections are not null for rendering, even after an error
            jobProposals ??= new List<JobProposal>();
            talents ??= new List<Talent>();
        }
        else
        {
            Logger.LogInformation("User not authenticated.");
        }

        isLoading = false;
        Logger.LogInformation("isLoading set to false. Calling StateHasChanged.");
        StateHasChanged();
    }

    // --- Feed Display Components ---

    private RenderFragment TalentFeed(IEnumerable<JobProposal>? proposals) => __builder =>
    {
        Logger.LogInformation("Rendering TalentFeed. Proposals parameter is null: {isParamNull}. Proposals parameter count: {paramCount}",
            proposals == null, proposals?.Count() ?? 0);

        __builder.OpenElement(0, "h2");
        __builder.AddContent(1, "Job Proposals Feed");
        __builder.CloseElement(); // h2

        if (proposals == null || !proposals.Any())
        {
            Logger.LogInformation("TalentFeed: No job proposals to display.");
            __builder.OpenElement(2, "p");
            __builder.OpenElement(3, "em");
            __builder.AddContent(4, "No job proposals available right now. Check back later!");
            __builder.CloseElement(); // em
            __builder.CloseElement(); // p
        }
        else
        {
            Logger.LogInformation("TalentFeed: Rendering {count} job proposals.", proposals.Count());
            __builder.OpenElement(5, "div");
            __builder.AddAttribute(6, "class", "list-group");
            foreach (var proposal in proposals)
            {
                __builder.OpenElement(7, "div");
                __builder.AddAttribute(8, "class", "list-group-item mb-3 shadow-sm"); // Added some styling

                __builder.OpenElement(9, "h5");
                __builder.AddAttribute(10, "class", "mb-1");
                __builder.AddContent(11, proposal.Name);
                __builder.CloseElement(); // h5

                if (proposal.Customer != null)
                {
                    __builder.OpenElement(12, "p");
                    __builder.AddAttribute(13, "class", "mb-1");
                    __builder.AddContent(14, $"Company: {proposal.Customer?.Company ?? "N/A"}");
                    __builder.CloseElement(); // p
                }

                if (proposal.Skill != null)
                {
                    __builder.OpenElement(15, "p");
                    __builder.AddAttribute(16, "class", "mb-1");
                    __builder.AddContent(17, $"Required Skill: {proposal.Skill?.Name ?? "N/A"} {(!string.IsNullOrEmpty(proposal.Skill?.Area) ? $"({proposal.Skill.Area})" : "")}");
                    __builder.CloseElement(); // p
                }
                else
                {
                     __builder.OpenElement(15, "p");
                    __builder.AddAttribute(16, "class", "mb-1");
                    __builder.AddContent(17, $"Required Skill ID: {proposal.SkillId}"); // Fallback if Skill object not loaded
                    __builder.CloseElement(); // p
                }


                __builder.OpenElement(18, "p");
                __builder.AddAttribute(19, "class", "mb-1");
                __builder.AddContent(20, proposal.Description);
                __builder.CloseElement(); // p

                __builder.OpenElement(21, "small");
                __builder.AddContent(22, $"Total Hours: {proposal.TotalHours}");
                __builder.CloseElement(); // small

                // You could add an "Apply" or "View Details" button here
                // __builder.OpenElement(23, "button");
                // __builder.AddAttribute(24, "class", "btn btn-primary btn-sm float-end");
                // __builder.AddContent(25, "View Details");
                // __builder.CloseElement(); // button

                __builder.CloseElement(); // list-group-item
            }
            __builder.CloseElement(); // list-group
        }
    };

    private RenderFragment CustomerFeed(IEnumerable<Talent>? currentTalents) => __builder => // Renamed parameter to avoid conflict
    {
        Logger.LogInformation("Rendering CustomerFeed. Talents parameter is null: {isParamNull}. Talents parameter count: {paramCount}",
            currentTalents == null, currentTalents?.Count() ?? 0);

        __builder.OpenElement(0, "h2");
        __builder.AddContent(1, "Available Talents");
        __builder.CloseElement(); // h2

        if (currentTalents == null || !currentTalents.Any())
        {
            Logger.LogInformation("CustomerFeed: No talents to display.");
            __builder.OpenElement(2, "p");
            __builder.OpenElement(3, "em");
            __builder.AddContent(4, "No talents found matching your criteria, or the platform is just getting started!");
            __builder.CloseElement(); // em
            __builder.CloseElement(); // p
        }
        else
        {
            Logger.LogInformation("CustomerFeed: Rendering {count} talents.", currentTalents.Count());
            __builder.OpenElement(5, "div");
            __builder.AddAttribute(6, "class", "list-group");
            foreach (var talent in currentTalents)
            {
                __builder.OpenElement(7, "div");
                __builder.AddAttribute(8, "class", "list-group-item mb-3 shadow-sm"); // Added some styling

                __builder.OpenElement(9, "h5");
                __builder.AddAttribute(10, "class", "mb-1");
                __builder.AddContent(11, talent.Name);
                __builder.CloseElement(); // h5

                if (talent.TalentCategory != null)
                {
                     __builder.OpenElement(12, "p");
                     __builder.AddAttribute(13, "class", "mb-1");
                     __builder.AddContent(14, $"Category: {talent.TalentCategory?.Name ?? "N/A"}");
                     __builder.CloseElement(); //p
                }
                else if (talent.TalentCategoryId.HasValue)
                {
                    __builder.OpenElement(12, "p");
                    __builder.AddAttribute(13, "class", "mb-1");
                    __builder.AddContent(14, $"Category ID: {talent.TalentCategoryId.Value}"); // Fallback
                    __builder.CloseElement(); //p
                }


                __builder.OpenElement(15, "p");
                __builder.AddAttribute(16, "class", "mb-1");
                __builder.AddContent(17, $"Country: {talent.Country}");
                __builder.CloseElement(); //p

                __builder.OpenElement(18, "p");
                __builder.AddAttribute(19, "class", "mb-1");
                __builder.AddContent(20, $"Email: {talent.Email}");
                __builder.CloseElement(); //p

                __builder.OpenElement(21, "small");
                __builder.AddAttribute(22, "class", "text-muted"); // Added class for styling
                __builder.AddContent(23, $"Rate: {talent.HourlyRate:C}/hour");
                __builder.CloseElement(); // small

                // You could add a "View Profile" or "Propose Job" button here
                // __builder.OpenElement(24, "button");
                // __builder.AddAttribute(25, "class", "btn btn-info btn-sm float-end");
                // __builder.AddContent(26, "View Profile");
                // __builder.CloseElement(); // button

                __builder.CloseElement(); // list-group-item
            }
            __builder.CloseElement(); // list-group
        }
    };
}
