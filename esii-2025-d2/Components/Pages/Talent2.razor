@page "/talents2"
@inject HttpClient Http

<h3>Talents</h3>

<button class="btn btn-primary mb-3" @onclick="ShowAddModal">Add New Talent</button>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Country</th>
            <th>Email</th>
            <th>Hourly Rate</th>
            <th>Category</th>
            <th>User ID</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (talents == null)
        {
            <tr><td colspan="7">Loading...</td></tr>
        }
        else if (!talents.Any())
        {
            <tr><td colspan="7">No talents found.</td></tr>
        }
        else
        {
            @foreach (var talent in talents)
            {
                <tr>
                    <td>@talent.Name</td>
                    <td>@talent.Country</td>
                    <td>@talent.Email</td>
                    <td>@talent.HourlyRate</td>
                    <td>@talent.TalentCategory?.Name</td>
                    <td>@talent.UserId</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => ShowEditModal(talent)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteTalent(talent.Id)">Delete</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<!-- Modal -->
@if (showModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((editingTalent.Id == 0) ? "Add Talent" : "Edit Talent")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editingTalent" OnValidSubmit="SaveTalent">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                        <div class="mb-3">
                            <label>Name</label>
                            <InputText class="form-control" @bind-Value="editingTalent.Name" />
                        </div>
                        <div class="mb-3">
                            <label>Country</label>
                            <InputText class="form-control" @bind-Value="editingTalent.Country" />
                        </div>
                        <div class="mb-3">
                            <label>Email</label>
                            <InputText type="email" class="form-control" @bind-Value="editingTalent.Email" />
                        </div>
                        <div class="mb-3">
                            <label>Hourly Rate</label>
                            <InputNumber class="form-control" @bind-Value="editingTalent.HourlyRate" />
                        </div>
                        <div class="mb-3">
                            <label>Talent Category ID</label>
                            <InputNumber class="form-control" @bind-Value="editingTalent.TalentCategoryId" />
                        </div>
                        <div class="mb-3">
                            <label>User ID</label>
                            <InputText class="form-control" @bind-Value="editingTalent.UserId" />
                        </div>

                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary ms-2" @onclick="CloseModal">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Talent>? talents;
    private Talent editingTalent = new();
    private bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTalents();
    }

    private async Task LoadTalents()
    {
        talents = await Http.GetFromJsonAsync<List<Talent>>("api/talent");
    }

    private void ShowAddModal()
    {
        editingTalent = new Talent();
        showModal = true;
    }

    private void ShowEditModal(Talent talent)
    {
        editingTalent = new Talent
        {
            Id = talent.Id,
            Name = talent.Name,
            Country = talent.Country,
            Email = talent.Email,
            HourlyRate = talent.HourlyRate,
            TalentCategoryId = talent.TalentCategoryId,
            UserId = talent.UserId
        };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task SaveTalent()
    {
        if (editingTalent.Id == 0)
        {
            // Create new
            var response = await Http.PostAsJsonAsync("api/talent", editingTalent);
            if (response.IsSuccessStatusCode)
            {
                await LoadTalents();
                CloseModal();
            }
            else
            {
                // handle error
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error creating talent: {error}");
            }
        }
        else
        {
            // Update existing
            var response = await Http.PutAsJsonAsync($"api/talent/{editingTalent.Id}", editingTalent);
            if (response.IsSuccessStatusCode)
            {
                await LoadTalents();
                CloseModal();
            }
            else
            {
                // handle error
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error updating talent: {error}");
            }
        }
    }

    private async Task DeleteTalent(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete talent {id}?"))
        {
            var response = await Http.DeleteAsync($"api/talent/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadTalents();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error deleting talent: {error}");
            }
        }
    }

    // Talent model matching the API
    public class Talent
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Country { get; set; } = "";
        public string Email { get; set; } = "";
        public decimal HourlyRate { get; set; }
        public int? TalentCategoryId { get; set; }
        public string UserId { get; set; } = "";
        public TalentCategory? TalentCategory { get; set; }
    }

    public class TalentCategory
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
    }

    [Inject] IJSRuntime JSRuntime { get; set; } = default!;
}
