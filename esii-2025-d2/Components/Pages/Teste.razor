@page "/teste"
@using esii_2025_d2.Models
@inject HttpClient Http
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h3>Available Skills</h3>

@if (skills == null)
{
    <p>Loading...</p>
}
else
{
    <ul>
        @foreach (var skill in skills)
        {
            <li>@skill.Name</li>
        }
    </ul>
}

<h3>Add a Skill</h3>
<button @onclick="ShowAddSkillDropdowns">Add Skill</button>

@if (showSkillForm)
{
    <div>
        <label for="area">Select Area:</label>
        <select id="area" value="@selectedArea" @onchange="OnAreaChanged" class="dropdown">
            <option value="">-- Select Area --</option>
            @foreach (var area in distinctAreas)
            {
                <option value="@area">@area</option>
            }
        </select>

        @if (filteredSkills != null && filteredSkills.Count > 0)
        {
            <label for="nome">Select Skill Name:</label>
            <select id="nome" @bind="selectedSkillNome" class="dropdown">
                <option value="">-- Select Skill Name --</option>
                @foreach (var skill in filteredSkills)
                {
                    <option value="@skill.Name">@skill.Name</option>
                }
            </select>

            <button @onclick="AddSkill" class="add-skill-button">Add Selected Skill</button>
        }
    </div>
}

@code {
    private List<Skill> skills = new List<Skill>();
    private List<Skill> filteredSkills = new List<Skill>();
    private List<string> distinctAreas = new List<string>();
    private string selectedArea = string.Empty;
    private string selectedSkillNome = string.Empty;
    private bool showSkillForm;

    protected override async Task OnInitializedAsync()
    {

        skills = await Http.GetFromJsonAsync<List<Skill>>("api/skill");

        if (skills != null)
        {
            // Extract distinct areas from skills
            distinctAreas = skills.Select(s => s.Area).Distinct().ToList();
        }
    }

    private void ShowAddSkillDropdowns()
    {
        showSkillForm = true;
    }

    private void OnAreaChanged(ChangeEventArgs e)
    {
        selectedArea = e.Value?.ToString() ?? string.Empty; // Safe handling for null

        // Filter skills based on selected area
        if (!string.IsNullOrEmpty(selectedArea))
        {
            filteredSkills = skills.Where(s => s.Area == selectedArea).ToList();
        }
        else
        {
            filteredSkills.Clear(); // Clear filteredSkills if no area is selected
        }

        selectedSkillNome = string.Empty; // Reset selected skill nome
    }

    private async Task AddSkill()
    {
        if (!string.IsNullOrEmpty(selectedSkillNome))
        {
            // Find the selected skill by nome
            var selectedSkill = skills.FirstOrDefault(s => s.Name == selectedSkillNome);

            if (selectedSkill != null)
            {
                // Create skill object to be added
                var newSkill = new Skill
                {
                    Name = selectedSkill.Name,
                    Area = selectedSkill.Area
                };

                try
                {
                    // Send POST request to the API to create the new skill
                    var response = await Http.PostAsJsonAsync("api/skill", newSkill);

                    if (response.IsSuccessStatusCode)
                    {
                        // Optionally, you can reload the skills after adding
                        skills = await Http.GetFromJsonAsync<List<Skill>>("api/skill");
                        distinctAreas = skills.Select(s => s.Area).Distinct().ToList();
                        showSkillForm = false;
                        selectedArea = string.Empty;
                        selectedSkillNome = string.Empty;
                    }
                    else
                    {
                        // Handle the error (e.g., display a message to the user)
                        Console.Error.WriteLine("Failed to add the skill.");
                    }
                }
                catch (Exception ex)
                {
                    // Handle any network errors or API failures
                    Console.Error.WriteLine($"An error occurred: {ex.Message}");
                }
            }
        }
    }
}

<style>
    .dropdown {
        width: 200px;     /* Fixed width for both dropdowns */
        padding: 5px;
        margin: 5px 0;
        font-size: 1rem;
        display: inline-block;
    }

    .add-skill-button {
        width: 200px;     /* Match button width with dropdown */
        padding: 8px 15px;
        font-size: 1rem;
        margin-top: 10px;
        display: inline-block;
    }

    label {
        font-size: 1.1rem;
    }

    button {
        margin-top: 10px;
        padding: 8px 15px;
        font-size: 1rem;
    }
</style>
