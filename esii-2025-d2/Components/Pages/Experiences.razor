@page "/Experiences"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.Security.Claims
@using System.Diagnostics
@using esii_2025_d2.Services
@using esii_2025_d2.Models
@attribute [Authorize(Roles = "Talent")]
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject ICurrentUserTalentService CurrentUserTalentService
@inject IExperienceService ExperienceService
@rendermode InteractiveServer

<h3>Experiences</h3>

<button class="btn btn-primary mb-3" @onclick="ShowAddModal">Add New Experience</button>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Title</th>
            <th>Company</th>
            <th>Start Year</th>
            <th>End Year</th>
            <th>Talent</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (experiences == null && !initialLoadAttempted)
        {
            <tr><td colspan="6">Loading experiences...</td></tr>
        }
        else if (experiences == null || !experiences.Any())
        {
            <tr><td colspan="6">No experiences found. @(string.IsNullOrWhiteSpace(apiError) ? "" : $"Error: {apiError}")</td></tr>
        }
        else
        {
            @foreach (var exp in experiences)
            {
                <tr>
                    <td>@exp.Title</td>
                    <td>@exp.CompanyName</td>
                    <td>@exp.StartYear</td>
                    <td>@(exp.EndYear?.ToString() ?? "-")</td>
                    <td>@exp.Talent?.Name</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => ShowEditModal(exp)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteExperience(exp.Id)">Delete</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (showModal)
{
    <div class="modal enhanced-modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((editingExperience.Id == 0) ? "Add New Experience" : "Edit Experience")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <EditForm Model="editingExperience" OnValidSubmit="SaveExperience">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <ValidationSummary class="alert alert-danger" />

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">
                                    <i class="fas fa-briefcase me-2"></i>Job Title *
                                </label>
                                <InputText class="form-control" @bind-Value="editingExperience.Title" placeholder="Enter your job title" />
                                <ValidationMessage For="@(() => editingExperience.Title)" class="text-danger" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">
                                    <i class="fas fa-building me-2"></i>Company Name *
                                </label>
                                <InputText class="form-control" @bind-Value="editingExperience.CompanyName" placeholder="Enter company name" />
                                <ValidationMessage For="@(() => editingExperience.CompanyName)" class="text-danger" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">
                                    <i class="fas fa-calendar-alt me-2"></i>Start Year *
                                </label>
                                <InputNumber class="form-control" @bind-Value="editingExperience.StartYear" placeholder="e.g., 2020" />
                                <ValidationMessage For="@(() => editingExperience.StartYear)" class="text-danger" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">
                                    <i class="fas fa-calendar-check me-2"></i>End Year
                                </label>
                                <InputNumber class="form-control" @bind-Value="editingExperience.EndYear" placeholder="Leave empty if current" />
                                <small class="form-text text-muted">Leave empty if this is your current position</small>
                                <ValidationMessage For="@(() => editingExperience.EndYear)" class="text-danger" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">
                                <i class="fas fa-user me-2"></i>Talent Profile *
                            </label>
                            @if (talents == null && !initialLoadAttempted) 
                            {
                                <div class="d-flex align-items-center">
                                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                                    <span class="text-muted">Loading talent profiles...</span>
                                </div>
                            } 
                            else if (talents == null || !talents.Any()) 
                            {
                                <div class="alert alert-warning">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    No talent profiles available. @(string.IsNullOrWhiteSpace(apiError) ? "You may need to create one first." : $"Error: {apiError}")
                                </div>
                                <InputSelect class="form-control" @bind-Value="editingExperience.TalentId" disabled>
                                     <option value="">-- No talents available --</option>
                                </InputSelect>
                            } 
                            else 
                            {
                                <InputSelect class="form-control" @bind-Value="editingExperience.TalentId">
                                    <option value="0">-- Select Talent Profile --</option>
                                    @foreach (var t in talents)
                                    {
                                        <option value="@t.Id">@t.Name (@t.Email)</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => editingExperience.TalentId)" class="text-danger" />
                            }
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                            <i class="fas fa-times me-2"></i>Cancel
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@(talents == null || !talents.Any())">
                            <i class="fas fa-save me-2"></i>@((editingExperience.Id == 0) ? "Add Experience" : "Update Experience")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private List<Talent>? talents;
    private List<Experience>? experiences;
    private Experience editingExperience = new();
    private bool showModal = false;
    private string? LoggedInUserId;
    private string? apiError;
    private bool initialLoadAttempted = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        LoggedInUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        initialLoadAttempted = false; // Reset before load attempts
        apiError = null;

        if (string.IsNullOrEmpty(LoggedInUserId))
        {
            apiError = "User not authenticated.";
            Console.WriteLine(apiError);
            talents = new List<Talent>();
            experiences = new List<Experience>();
            initialLoadAttempted = true;
            return;
        }

        await LoadUserTalents();
        await LoadExperiences();
        initialLoadAttempted = true;
    }

    private async Task LoadUserTalents()
    {
        try
        {
            talents = await CurrentUserTalentService.GetMyTalentsAsync();
            if (talents == null) talents = new List<Talent>();
        }
        catch (Exception ex)
        {
            apiError = $"Failed to load talent profiles: {ex.Message}";
            Console.WriteLine($"{apiError}");
            talents = new List<Talent>();
        }
    }

    private async Task LoadExperiences()
    {
        Console.WriteLine("Loading experiences...");
        try
        {
            if (!string.IsNullOrEmpty(LoggedInUserId))
            {
                experiences = await ExperienceService.GetMyExperiencesAsync(LoggedInUserId);
            }
            if (experiences == null) experiences = new List<Experience>();
        }
        catch (Exception ex)
        {
            apiError = (apiError ?? "") + $" Failed to load experiences: {ex.Message}";
            Console.WriteLine($"Failed to load experiences. Error: {ex.Message}");
            experiences = new List<Experience>();
            Console.WriteLine($"Exception details: {ex}");
        }
    }

    private void ShowAddModal()
    {
        editingExperience = new Experience();
        if (talents != null && talents.Any())
        {
            // If there's only one talent profile, or to pre-select the first available one.
            editingExperience.TalentId = talents.FirstOrDefault()?.Id ?? 0;
        } else {
            editingExperience.TalentId = 0; // No talents to select
        }
        showModal = true;
    }

    private void ShowEditModal(Experience exp)
    {
        // Create a new instance to avoid modifying the original object in the list directly
        editingExperience = new Experience
        {
            Id = exp.Id,
            Title = exp.Title,
            CompanyName = exp.CompanyName,
            StartYear = exp.StartYear,
            EndYear = exp.EndYear,
            TalentId = exp.TalentId
        };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        editingExperience = new Experience(); // Clear the form
    }

    private async Task SaveExperience()
    {
        if (editingExperience.TalentId == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please select a Talent Profile.");
            return;
        }

        apiError = null;
        try
        {
            bool success = false;
            if (editingExperience.Id == 0) // New experience
            {
                var result = await ExperienceService.CreateExperienceAsync(editingExperience);
                success = result != null;
            }
            else // Existing experience
            {
                success = await ExperienceService.UpdateExperienceAsync(editingExperience);
            }

            if (success)
            {
                await LoadExperiences(); // Refresh the list
                CloseModal();
            }
            else
            {
                apiError = "Error saving experience.";
                Console.WriteLine(apiError);
                await JSRuntime.InvokeVoidAsync("alert", apiError);
            }
        }
        catch (Exception ex)
        {
            apiError = $"An exception occurred while saving the experience: {ex.Message}";
            Console.WriteLine(apiError);
            await JSRuntime.InvokeVoidAsync("alert", apiError);
        }
    }

    private async Task DeleteExperience(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this experience?"))
        {
            apiError = null;
            try
            {
                bool success = false;
                if (!string.IsNullOrEmpty(LoggedInUserId))
                {
                    success = await ExperienceService.DeleteExperienceAsync(id, LoggedInUserId);
                }

                if (success)
                {
                    await LoadExperiences(); // Refresh the list
                }
                else
                {
                    apiError = "Error deleting experience.";
                    Console.WriteLine(apiError);
                    await JSRuntime.InvokeVoidAsync("alert", apiError);
                }
            }
            catch (Exception ex)
            {
                apiError = $"An exception occurred while deleting the experience: {ex.Message}";
                Console.WriteLine(apiError);
                await JSRuntime.InvokeVoidAsync("alert", apiError);
            }
        }
    }
}
