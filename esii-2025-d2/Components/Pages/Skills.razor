@page "/skills"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer
<h3>Skills Management</h3>
@if (!string.IsNullOrEmpty(statusMessage))
{
<div class="@statusClass">
@statusMessage
<button type="button" class="btn-close float-end" @onclick="() => statusMessage = string.Empty"></button>
</div>
}

<button class="btn btn-primary mb-3" @onclick="ShowAddModal">Create New Skill</button>

<table class="table table-striped"> 
    <thead> 
        <tr> 
            <th>Name</th> 
            <th>Professional Area</th> 
            <th>Actions</th> 
        </tr> 
    </thead> 
    <tbody> 
        @if (skills == null) 
        { 
            <tr><td colspan="3">Loading...</td></tr> 
        } 
        else if (!skills.Any()) 
        { 
            <tr><td colspan="3">No skills found.</td></tr> 
        } 
        else 
        { 
            @foreach (var skill in skills) 
            { 
                <tr> 
                    <td>@skill.Name</td> 
                    <td>@skill.Area</td> 
                    <td> 
                        <button class="btn btn-sm btn-warning" @onclick="() => ShowEditModal(skill)">Edit</button> 
                        <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteConfirm(skill)">Delete</button> 
                    </td> 
                </tr> 
            } 
        } 
    </tbody> 
</table>

<!-- Edit/Add Modal -->
@if (showModal)
{
<div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
<div class="modal-dialog">
<div class="modal-content">
<div class="modal-header">
<h5 class="modal-title">@((editingSkill.Id == 0) ? "Add Skill" : "Edit Skill")</h5>
<button type="button" class="btn-close" @onclick="CloseModal"></button>
</div>
<div class="modal-body">
<EditForm Model="editingSkill" OnValidSubmit="SaveSkill">
<DataAnnotationsValidator />
<ValidationSummary />
                    <div class="mb-3">
                        <label>Name</label>
                        <InputText class="form-control" @bind-Value="editingSkill.Name" />
                        <ValidationMessage For="@(() => editingSkill.Name)" />
                    </div>
                    
                    <div class="mb-3">
                        <label>Professional Area</label>
                        <InputSelect class="form-control" @bind-Value="editingSkill.Area">
                            <option value="">-- Select Area --</option>
                            @foreach (var area in professionalAreas)
                            {
                                <option value="@area">@area</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => editingSkill.Area)" />
                    </div>
                    
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary ms-2" @onclick="CloseModal">Cancel</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteConfirm)
{
<div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
<div class="modal-dialog">
<div class="modal-content">
<div class="modal-header">
<h5 class="modal-title">Confirm Delete</h5>
<button type="button" class="btn-close" @onclick="CancelDelete"></button>
</div>
<div class="modal-body">
<p>Are you sure you want to delete the skill "@deletingSkill?.Name"?</p>
@if (isSkillInUse)
{
    <div class="alert alert-danger">
        This skill cannot be deleted because it is currently associated with one or more talent profiles.
    </div>
}
</div>
<div class="modal-footer">
<button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
<button type="button" class="btn btn-danger" @onclick="ConfirmDelete" disabled="@isSkillInUse">Delete</button>
</div>
</div>
</div>
</div>
}

@code {
private List<Skill>? skills;
private Skill editingSkill = new();
private bool showModal = false;
private string statusMessage = string.Empty;
private string statusClass = string.Empty;
private bool showDeleteConfirm = false;
private Skill? deletingSkill = null;
private bool isSkillInUse = false;

// Predefined list of professional areas
private List<string> professionalAreas = new List<string>
{
    "Developer",
    "Design",
    "Product Manager",
    "Project Manager",
    "Marketing",
    "Sales",
    "Human Resources",
    "Finance",
    "Legal",
    "Customer Support",
    "Data Science",
    "DevOps",
    "Quality Assurance"
};

protected override async Task OnInitializedAsync()
{
    await LoadSkills();
}

private async Task LoadSkills()
{
    try {
        skills = await Http.GetFromJsonAsync<List<Skill>>("api/skill");
    }
    catch (Exception ex) {
        ShowErrorMessage($"Failed to load skills: {ex.Message}");
    }
}

private void ShowAddModal()
{
    editingSkill = new Skill();
    showModal = true;
}

private void ShowEditModal(Skill skill)
{
    editingSkill = new Skill
    {
        Id = skill.Id,
        Name = skill.Name,
        Area = skill.Area
    };
    showModal = true;
}

private void CloseModal()
{
    showModal = false;
}

private async Task SaveSkill()
{
    try
    {
        if (editingSkill.Id == 0)
        {
            // Create new skill
            var response = await Http.PostAsJsonAsync("api/skill", editingSkill);
            if (response.IsSuccessStatusCode)
            {
                await LoadSkills();
                CloseModal();
                ShowSuccessMessage("Skill created successfully!");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ShowErrorMessage($"Error creating skill: {error}");
            }
        }
        else
        {
            // Update existing skill
            var response = await Http.PutAsJsonAsync($"api/skill/{editingSkill.Id}", editingSkill);
            if (response.IsSuccessStatusCode)
            {
                await LoadSkills();
                CloseModal();
                ShowSuccessMessage("Skill updated successfully!");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ShowErrorMessage($"Error updating skill: {error}");
            }
        }
    }
    catch (Exception ex)
    {
        ShowErrorMessage($"An error occurred: {ex.Message}");
    }
}

private async Task ShowDeleteConfirm(Skill skill)
{
    deletingSkill = skill;
    
    // Check if skill is in use by any talent
    try
    {
        var response = await Http.GetAsync($"api/skill/{skill.Id}/inuse");
        isSkillInUse = await response.Content.ReadFromJsonAsync<bool>();
    }
    catch
    {
        // Default to true as a safety mechanism if the check fails
        isSkillInUse = true;
    }
    
    showDeleteConfirm = true;
}

private void CancelDelete()
{
    deletingSkill = null;
    showDeleteConfirm = false;
    isSkillInUse = false;
}

private async Task ConfirmDelete()
{
    if (deletingSkill != null && !isSkillInUse)
    {
        await DeleteSkill(deletingSkill.Id);
        showDeleteConfirm = false;
        deletingSkill = null;
    }
}

private async Task DeleteSkill(int id)
{
    try
    {
        var response = await Http.DeleteAsync($"api/skill/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadSkills();
            ShowSuccessMessage("Skill deleted successfully!");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            ShowErrorMessage($"Error deleting skill: {error}");
        }
    }
    catch (Exception ex)
    {
        ShowErrorMessage($"An error occurred: {ex.Message}");
    }
}

private void ShowSuccessMessage(string message)
{
    statusMessage = message;
    statusClass = "alert alert-success";
}

private void ShowErrorMessage(string message)
{
    statusMessage = message;
    statusClass = "alert alert-danger";
}

public class Skill
{
    public int Id { get; set; }
    
    [Required(ErrorMessage = "Name is required")]
    [StringLength(100, ErrorMessage = "Name cannot exceed 100 characters")]
    public string Name { get; set; } = "";
    
    [Required(ErrorMessage = "Professional area is required")]
    public string? Area { get; set; }
}
}