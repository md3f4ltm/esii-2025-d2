@page "/Experiences"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h3>Experiences</h3>

<button class="btn btn-primary mb-3" @onclick="ShowAddModal">Add New Experience</button>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Title</th>
            <th>Company</th>
            <th>Start Year</th>
            <th>End Year</th>
            <th>Talent ID</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (experiences == null)
        {
            <tr><td colspan="6">Loading...</td></tr>
        }
        else if (!experiences.Any())
        {
            <tr><td colspan="6">No experiences found.</td></tr>
        }
        else
        {
            @foreach (var exp in experiences)
            {
                <tr>
                    <td>@exp.Title</td>
                    <td>@exp.CompanyName</td>
                    <td>@exp.StartYear</td>
                    <td>@(exp.EndYear?.ToString() ?? "-")</td>
                    <td>@exp.TalentId</td>
                    <td>
                        <button class="btn btn-sm btn-warning" @onclick="() => ShowEditModal(exp)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteExperience(exp.Id)">Delete</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@if (showModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((editingExperience.Id == 0) ? "Add Experience" : "Edit Experience")</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editingExperience" OnValidSubmit="SaveExperience">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                        <div class="mb-3">
                            <label>Title</label>
                            <InputText class="form-control" @bind-Value="editingExperience.Title" />
                        </div>
                        <div class="mb-3">
                            <label>Company Name</label>
                            <InputText class="form-control" @bind-Value="editingExperience.CompanyName" />
                        </div>
                        <div class="mb-3">
                            <label>Start Year</label>
                            <InputNumber class="form-control" @bind-Value="editingExperience.StartYear" />
                        </div>
                        <div class="mb-3">
                            <label>End Year</label>
                            <InputNumber class="form-control" @bind-Value="editingExperience.EndYear" />
                        </div>
                        <div class="mb-3">
                            <label>Talent ID</label>
                            <InputNumber class="form-control" @bind-Value="editingExperience.TalentId" />
                        </div>

                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary ms-2" @onclick="CloseModal">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Experience>? experiences;
    private Experience editingExperience = new();
    private bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadExperiences();
    }

    private async Task LoadExperiences()
    {
        experiences = await Http.GetFromJsonAsync<List<Experience>>("api/experience");
    }

    private void ShowAddModal()
    {
        editingExperience = new Experience();
        showModal = true;
    }

    private void ShowEditModal(Experience exp)
    {
        editingExperience = new Experience
        {
            Id = exp.Id,
            Title = exp.Title,
            CompanyName = exp.CompanyName,
            StartYear = exp.StartYear,
            EndYear = exp.EndYear,
            TalentId = exp.TalentId
        };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task SaveExperience()
    {
        HttpResponseMessage response;

        if (editingExperience.Id == 0)
        {
            response = await Http.PostAsJsonAsync("api/experience", editingExperience);
        }
        else
        {
            response = await Http.PutAsJsonAsync($"api/experience/{editingExperience.Id}", editingExperience);
        }

        if (response.IsSuccessStatusCode)
        {
            await LoadExperiences();
            CloseModal();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error saving experience: {error}");
        }
    }

    private async Task DeleteExperience(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete experience {id}?"))
        {
            var response = await Http.DeleteAsync($"api/experience/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadExperiences();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error deleting experience: {error}");
            }
        }
    }

    public class Experience
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string CompanyName { get; set; } = "";
        public int StartYear { get; set; }
        public int? EndYear { get; set; }
        public int TalentId { get; set; }
        public Talent? Talent { get; set; }
    }

    public class Talent
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
    }
}
